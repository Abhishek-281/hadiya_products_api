name: Replace and Verify Tokens

on:
  push:
    branches:
      - develop
      - release
      - 'release/**'
      - 'release*'

jobs:
  replace-tokens:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - uses: actions/checkout@v3

      # Step 2: Set Environment Variables Based on Branch
      - name: Set Environment Variable and KeyVault
        run: |
          if [[ $GITHUB_REF == refs/heads/release* ]]; then
            echo "ENV=uat" >> $GITHUB_ENV
            echo "KEYVAULT_NAME=qwertyrelease" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "KEYVAULT_NAME=qwertydemoprism" >> $GITHUB_ENV
          fi

      # Step 3: Azure Login
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS1 }}

      # Step 4: Fetch Secrets from Azure Key Vault and Set Variables
      - name: Fetch secrets and set variables
        uses: azure/cli@v1
        with:
          inlineScript: |
            secrets=$(az keyvault secret list --vault-name ${{ env.KEYVAULT_NAME }} --query '[].name' -o tsv)
            for secret in $secrets; do
              value=$(az keyvault secret show --name $secret --vault-name ${{ env.KEYVAULT_NAME }} --query 'value' -o tsv)
              echo "${secret}=${value}" >> $GITHUB_ENV
            done

      # Step 5: Replace Tokens in appsettings.json
      - name: Replace Tokens in appsettings.json
        uses: cschleiden/replace-tokens@v1
        with:
          files: '**/appsettings.json'
          tokenPrefix: "#{"
          tokenSuffix: "}#"
        env:
          EncryptionKey: ${{ env.EncryptionKey }}
          ExtenalGeoFencingCorpIds: ${{ env.ExtenalGeoFencingCorpIds }}
          Jwt-Expiry: ${{ env.Jwt-Expiry }}
          prismhrclientId: ${{ env.prismhrclientId }}
          service-bus-connectionstring: ${{ env.service-bus-connectionstring }}
          Notification-URI: ${{ env.Notification-URI }}
          Proxy-URI: ${{ env.Proxy-URI }}
          x-tlm-auth: ${{ env.x-tlm-auth }}

      # Step 6: Verify Token Replacement
      - name: Verify Token Replacement
        run: |
          echo "Environment: ${{ env.ENV }}"
          echo "Using KeyVault: ${{ env.KEYVAULT_NAME }}"
          echo "Displaying replaced appsettings.json content:"
          cat appsettings.json

      # Step 7: Docker Login to ACR
      - name: Docker Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 8: Build and Push Docker Image with Latest Tag
      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          echo "Building Docker image for environment: $ENV"
          # Build the Docker image with both the run ID and latest tag
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/identity-api:${IMAGE_TAG} -t ${{ secrets.ACR_LOGIN_SERVER }}/identity-api:latest .
          # Push the Docker image with the specific tag
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/identity-api:${IMAGE_TAG}
          # Push the Docker image with the latest tag
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/identity-api:latest
